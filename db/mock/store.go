// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Luckny/space-it/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination db/mock/store.go github.com/Luckny/space-it/db/sqlc Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/Luckny/space-it/db/sqlc"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateSpace mocks base method.
func (m *MockStore) CreateSpace(arg0 context.Context, arg1 db.CreateSpaceParams) (db.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSpace", arg0, arg1)
	ret0, _ := ret[0].(db.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSpace indicates an expected call of CreateSpace.
func (mr *MockStoreMockRecorder) CreateSpace(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpace", reflect.TypeOf((*MockStore)(nil).CreateSpace), arg0, arg1)
}

// DeleteSpace mocks base method.
func (m *MockStore) DeleteSpace(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSpace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSpace indicates an expected call of DeleteSpace.
func (mr *MockStoreMockRecorder) DeleteSpace(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSpace", reflect.TypeOf((*MockStore)(nil).DeleteSpace), arg0, arg1)
}

// GetSpaceByID mocks base method.
func (m *MockStore) GetSpaceByID(arg0 context.Context, arg1 uuid.UUID) (db.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpaceByID", arg0, arg1)
	ret0, _ := ret[0].(db.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpaceByID indicates an expected call of GetSpaceByID.
func (mr *MockStoreMockRecorder) GetSpaceByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpaceByID", reflect.TypeOf((*MockStore)(nil).GetSpaceByID), arg0, arg1)
}

// GetSpaceByName mocks base method.
func (m *MockStore) GetSpaceByName(arg0 context.Context, arg1 string) (db.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpaceByName", arg0, arg1)
	ret0, _ := ret[0].(db.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpaceByName indicates an expected call of GetSpaceByName.
func (mr *MockStoreMockRecorder) GetSpaceByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpaceByName", reflect.TypeOf((*MockStore)(nil).GetSpaceByName), arg0, arg1)
}

// ListSpaces mocks base method.
func (m *MockStore) ListSpaces(arg0 context.Context, arg1 db.ListSpacesParams) ([]db.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSpaces", arg0, arg1)
	ret0, _ := ret[0].([]db.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpaces indicates an expected call of ListSpaces.
func (mr *MockStoreMockRecorder) ListSpaces(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpaces", reflect.TypeOf((*MockStore)(nil).ListSpaces), arg0, arg1)
}

// RegisterUser mocks base method.
func (m *MockStore) RegisterUser(arg0 context.Context, arg1 db.RegisterUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockStoreMockRecorder) RegisterUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockStore)(nil).RegisterUser), arg0, arg1)
}

// UpdateSpace mocks base method.
func (m *MockStore) UpdateSpace(arg0 context.Context, arg1 db.UpdateSpaceParams) (db.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSpace", arg0, arg1)
	ret0, _ := ret[0].(db.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSpace indicates an expected call of UpdateSpace.
func (mr *MockStoreMockRecorder) UpdateSpace(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpace", reflect.TypeOf((*MockStore)(nil).UpdateSpace), arg0, arg1)
}
