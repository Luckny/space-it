// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tokens.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (user_id, expiry, attributes)
VALUES ( $1, $2, $3)
RETURNING token_id, user_id, expiry, attributes
`

type CreateTokenParams struct {
	UserID     uuid.UUID          `json:"user_id"`
	Expiry     pgtype.Timestamptz `json:"expiry"`
	Attributes string             `json:"attributes"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRow(ctx, createToken, arg.UserID, arg.Expiry, arg.Attributes)
	var i Token
	err := row.Scan(
		&i.TokenID,
		&i.UserID,
		&i.Expiry,
		&i.Attributes,
	)
	return i, err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM tokens
WHERE token_id = $1
`

func (q *Queries) DeleteToken(ctx context.Context, tokenID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteToken, tokenID)
	return err
}

const getToken = `-- name: GetToken :one
SELECT token_id, user_id, expiry, attributes FROM tokens
WHERE token_id = $1 LIMIT 1
`

func (q *Queries) GetToken(ctx context.Context, tokenID uuid.UUID) (Token, error) {
	row := q.db.QueryRow(ctx, getToken, tokenID)
	var i Token
	err := row.Scan(
		&i.TokenID,
		&i.UserID,
		&i.Expiry,
		&i.Attributes,
	)
	return i, err
}
