// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: spaces.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createSpace = `-- name: CreateSpace :one
INSERT INTO spaces (id, name, owner)
VALUES ($1, $2, $3)
RETURNING id, name, owner, created_at
`

type CreateSpaceParams struct {
	ID    uuid.UUID `json:"id"`
	Name  string    `json:"name"`
	Owner uuid.UUID `json:"owner"`
}

func (q *Queries) CreateSpace(ctx context.Context, arg CreateSpaceParams) (Space, error) {
	row := q.db.QueryRow(ctx, createSpace, arg.ID, arg.Name, arg.Owner)
	var i Space
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Owner,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSpace = `-- name: DeleteSpace :exec
DELETE FROM spaces
WHERE id = $1
`

func (q *Queries) DeleteSpace(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSpace, id)
	return err
}

const getSpaceByID = `-- name: GetSpaceByID :one
SELECT id, name, owner, created_at FROM spaces
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSpaceByID(ctx context.Context, id uuid.UUID) (Space, error) {
	row := q.db.QueryRow(ctx, getSpaceByID, id)
	var i Space
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Owner,
		&i.CreatedAt,
	)
	return i, err
}

const getSpaceByName = `-- name: GetSpaceByName :one
SELECT id, name, owner, created_at FROM spaces
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetSpaceByName(ctx context.Context, name string) (Space, error) {
	row := q.db.QueryRow(ctx, getSpaceByName, name)
	var i Space
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Owner,
		&i.CreatedAt,
	)
	return i, err
}

const listSpaces = `-- name: ListSpaces :many
SELECT id, name, owner, created_at FROM spaces
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListSpacesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSpaces(ctx context.Context, arg ListSpacesParams) ([]Space, error) {
	rows, err := q.db.Query(ctx, listSpaces, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Space{}
	for rows.Next() {
		var i Space
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Owner,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSpace = `-- name: UpdateSpace :one
UPDATE spaces
SET name = $2
WHERE id = $1
RETURNING id, name, owner, created_at
`

type UpdateSpaceParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateSpace(ctx context.Context, arg UpdateSpaceParams) (Space, error) {
	row := q.db.QueryRow(ctx, updateSpace, arg.ID, arg.Name)
	var i Space
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Owner,
		&i.CreatedAt,
	)
	return i, err
}
