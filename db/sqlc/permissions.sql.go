// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: permissions.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createAllPermission = `-- name: CreateAllPermission :one
INSERT INTO permissions (user_id, space_id, read_permission, write_permission, delete_permission)
VALUES ($1, $2, true, true, true)
RETURNING space_id, user_id, read_permission, write_permission, delete_permission, created_at, updated_at
`

type CreateAllPermissionParams struct {
	UserID  uuid.UUID `json:"user_id"`
	SpaceID uuid.UUID `json:"space_id"`
}

func (q *Queries) CreateAllPermission(ctx context.Context, arg CreateAllPermissionParams) (Permission, error) {
	row := q.db.QueryRow(ctx, createAllPermission, arg.UserID, arg.SpaceID)
	var i Permission
	err := row.Scan(
		&i.SpaceID,
		&i.UserID,
		&i.ReadPermission,
		&i.WritePermission,
		&i.DeletePermission,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createDeletePermission = `-- name: CreateDeletePermission :one
INSERT INTO permissions (user_id, space_id, delete_permission)
VALUES ($1, $2, true)
RETURNING space_id, user_id, read_permission, write_permission, delete_permission, created_at, updated_at
`

type CreateDeletePermissionParams struct {
	UserID  uuid.UUID `json:"user_id"`
	SpaceID uuid.UUID `json:"space_id"`
}

func (q *Queries) CreateDeletePermission(ctx context.Context, arg CreateDeletePermissionParams) (Permission, error) {
	row := q.db.QueryRow(ctx, createDeletePermission, arg.UserID, arg.SpaceID)
	var i Permission
	err := row.Scan(
		&i.SpaceID,
		&i.UserID,
		&i.ReadPermission,
		&i.WritePermission,
		&i.DeletePermission,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createPermission = `-- name: CreatePermission :one
INSERT INTO permissions (user_id, space_id, read_permission, write_permission, delete_permission)
VALUES ($1, $2, $3, $4, $5)
RETURNING space_id, user_id, read_permission, write_permission, delete_permission, created_at, updated_at
`

type CreatePermissionParams struct {
	UserID           uuid.UUID `json:"user_id"`
	SpaceID          uuid.UUID `json:"space_id"`
	ReadPermission   bool      `json:"read_permission"`
	WritePermission  bool      `json:"write_permission"`
	DeletePermission bool      `json:"delete_permission"`
}

func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) (Permission, error) {
	row := q.db.QueryRow(ctx, createPermission,
		arg.UserID,
		arg.SpaceID,
		arg.ReadPermission,
		arg.WritePermission,
		arg.DeletePermission,
	)
	var i Permission
	err := row.Scan(
		&i.SpaceID,
		&i.UserID,
		&i.ReadPermission,
		&i.WritePermission,
		&i.DeletePermission,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createReadPermission = `-- name: CreateReadPermission :one
INSERT INTO permissions (user_id, space_id, read_permission)
VALUES ($1, $2, true)
RETURNING space_id, user_id, read_permission, write_permission, delete_permission, created_at, updated_at
`

type CreateReadPermissionParams struct {
	UserID  uuid.UUID `json:"user_id"`
	SpaceID uuid.UUID `json:"space_id"`
}

func (q *Queries) CreateReadPermission(ctx context.Context, arg CreateReadPermissionParams) (Permission, error) {
	row := q.db.QueryRow(ctx, createReadPermission, arg.UserID, arg.SpaceID)
	var i Permission
	err := row.Scan(
		&i.SpaceID,
		&i.UserID,
		&i.ReadPermission,
		&i.WritePermission,
		&i.DeletePermission,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createWritePermission = `-- name: CreateWritePermission :one
INSERT INTO permissions (user_id, space_id, write_permission)
VALUES ($1, $2, true)
RETURNING space_id, user_id, read_permission, write_permission, delete_permission, created_at, updated_at
`

type CreateWritePermissionParams struct {
	UserID  uuid.UUID `json:"user_id"`
	SpaceID uuid.UUID `json:"space_id"`
}

func (q *Queries) CreateWritePermission(ctx context.Context, arg CreateWritePermissionParams) (Permission, error) {
	row := q.db.QueryRow(ctx, createWritePermission, arg.UserID, arg.SpaceID)
	var i Permission
	err := row.Scan(
		&i.SpaceID,
		&i.UserID,
		&i.ReadPermission,
		&i.WritePermission,
		&i.DeletePermission,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPermissionsByUserAndSpaceID = `-- name: GetPermissionsByUserAndSpaceID :one
SELECT space_id, user_id, read_permission, write_permission, delete_permission, created_at, updated_at FROM permissions
WHERE user_id = $1
AND space_id = $2
LIMIT 1
`

type GetPermissionsByUserAndSpaceIDParams struct {
	UserID  uuid.UUID `json:"user_id"`
	SpaceID uuid.UUID `json:"space_id"`
}

func (q *Queries) GetPermissionsByUserAndSpaceID(ctx context.Context, arg GetPermissionsByUserAndSpaceIDParams) (Permission, error) {
	row := q.db.QueryRow(ctx, getPermissionsByUserAndSpaceID, arg.UserID, arg.SpaceID)
	var i Permission
	err := row.Scan(
		&i.SpaceID,
		&i.UserID,
		&i.ReadPermission,
		&i.WritePermission,
		&i.DeletePermission,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
